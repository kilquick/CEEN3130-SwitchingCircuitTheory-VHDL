-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--sign is sign
sign = OUTPUT(A1L31);


--seg[0] is seg[0]
seg[0] = OUTPUT(A1L20);


--seg[1] is seg[1]
seg[1] = OUTPUT(A1L18);


--seg[2] is seg[2]
seg[2] = OUTPUT(A1L16);


--seg[3] is seg[3]
seg[3] = OUTPUT(A1L14);


--seg[4] is seg[4]
seg[4] = OUTPUT(A1L12);


--seg[5] is seg[5]
seg[5] = OUTPUT(A1L10);


--seg[6] is seg[6]
seg[6] = OUTPUT(A1L8);


--bcd[3] is bcd[3]
bcd[3] = INPUT();


--hex is hex
hex = INPUT();


--A1L30 is sign~0
A1L30 = (bcd[3] & !hex);


--bcd[1] is bcd[1]
bcd[1] = INPUT();


--bcd[0] is bcd[0]
bcd[0] = INPUT();


--bcd[2] is bcd[2]
bcd[2] = INPUT();


--A1L19 is Mux6~0
A1L19 = (hex & ((bcd[2] $ (!bcd[3])))) # (!hex & (!bcd[2] & ((bcd[0]) # (!bcd[3]))));


--A1L20 is Mux6~1
A1L20 = (bcd[1] & (bcd[0] & (bcd[2] & !A1L19))) # (!bcd[1] & (((A1L19))));


--A1L17 is Mux5~0
A1L17 = (bcd[1] & ((bcd[2] & ((bcd[0]) # (bcd[3]))) # (!bcd[2] & ((!bcd[3]))))) # (!bcd[1] & (bcd[0] & ((bcd[3]) # (!bcd[2]))));


--A1L18 is Mux5~1
A1L18 = (A1L17 & ((!bcd[3]) # (!hex)));


--A1L15 is Mux4~0
A1L15 = (hex & bcd[3]);


--A1L16 is Mux4~1
A1L16 = (bcd[1] & (((bcd[0] & !A1L15)))) # (!bcd[1] & ((bcd[2] & ((!A1L15))) # (!bcd[2] & (bcd[0]))));


--A1L13 is Mux3~0
A1L13 = (hex & bcd[3]);


--A1L14 is Mux3~1
A1L14 = (bcd[1] & ((bcd[0] & (bcd[2])) # (!bcd[0] & (!bcd[2] & A1L13)))) # (!bcd[1] & (!A1L13 & (bcd[0] $ (bcd[2]))));


--A1L11 is Mux2~0
A1L11 = (bcd[1] & (((bcd[3] & hex)) # (!bcd[0]))) # (!bcd[1] & (bcd[3] & (!bcd[0] & hex)));


--A1L12 is Mux2~1
A1L12 = (A1L11 & (bcd[2] $ (!bcd[3])));


--A1L9 is Mux1~0
A1L9 = (bcd[3] & (hex & ((bcd[1]) # (!bcd[0])))) # (!bcd[3] & (bcd[0] $ ((bcd[1]))));


--A1L10 is Mux1~1
A1L10 = (bcd[2] & (A1L9)) # (!bcd[2] & (((A1L30 & bcd[1]))));


--A1L7 is Mux0~0
A1L7 = (bcd[2] & ((!hex) # (!bcd[3])));


--A1L8 is Mux0~1
A1L8 = (bcd[3] & (A1L7 & (bcd[1] $ (!bcd[0])))) # (!bcd[3] & (!bcd[1] & (bcd[0] $ (A1L7))));


--A1L31 is sign~0_wirecell
A1L31 = !A1L30;


